buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        // TODO: ACL - DO WE EVEN NEED ANY OF THIS? It genuinely doesn't care and builds & runs without it!
        //classpath "com.android.tools.build:gradle:$gradlePluginVersion"
        //classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        //classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
        //classpath "com.google.gms:google-services:$googleServicesVersion"
        //classpath "com.google.dagger:hilt-android-gradle-plugin:$daggerVersion"
    }
}

plugins {
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlinx-serialization'
apply plugin: 'dagger.hilt.android.plugin'

configurations.all {
    exclude module: "commons-logging"
}

def canonicalVersionCode = 373
def canonicalVersionName = "1.18.4"

def postFixSize = 10
def abiPostFix = ['armeabi-v7a' : 1,
                  'arm64-v8a'   : 2,
                  'x86'         : 3,
                  'x86_64'      : 4,
                  'universal'   : 5]

// Function to get the current git commit hash so we can embed it along w/ the build version.
// Note: This is information is visible in the SettingsActivity, right at the bottom (R.id.versionTextView).
def getGitHash = providers.exec {
    commandLine("git", "rev-parse", "--short", "HEAD")
}.standardOutput.asText.get().trim()

android {
    compileSdkVersion androidCompileSdkVersion
    namespace 'network.loki.messenger'
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        // Note: Modules such as libsession, libsignal etc. use VERSION_17, so to update to a more recent
        // language spec like VERSION_20 we need to update all modules at the same time. -ACL 2024-05-04
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'NOTICE'
        exclude 'asm-license.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }

    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.7'
    }

    defaultConfig {
        versionCode canonicalVersionCode * postFixSize
        versionName canonicalVersionName

        minSdkVersion androidMinimumSdkVersion
        targetSdkVersion androidTargetSdkVersion

        multiDexEnabled = true

        vectorDrawables.useSupportLibrary = true
        project.ext.set("archivesBaseName", "session")

        buildConfigField "long", "BUILD_TIMESTAMP", getLastCommitTimestamp() + "L"
        buildConfigField "String", "GIT_HASH", "\"$getGitHash\""
        buildConfigField "String", "CONTENT_PROXY_HOST", "\"contentproxy.signal.org\""
        buildConfigField "int", "CONTENT_PROXY_PORT", "443"
        buildConfigField "String", "USER_AGENT", "\"OWA\""
        buildConfigField "String[]", "LANGUAGES", "new String[]{\"" + autoResConfig().collect { s -> s.replace('-r', '_') }.join('", "') + '"}'
        buildConfigField "int", "CANONICAL_VERSION_CODE", "$canonicalVersionCode"

        resConfigs autoResConfig()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
        testOptions {
            execution 'ANDROIDX_TEST_ORCHESTRATOR'
        }
    }

    sourceSets {
        String sharedTestDir = 'src/sharedTest/java'
        test.java.srcDirs += sharedTestDir
        androidTest.java.srcDirs += sharedTestDir
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            isDefault true
            minifyEnabled false
            enableUnitTestCoverage true
        }
    }

    flavorDimensions "distribution"
    productFlavors {
        play {
            isDefault true
            dimension "distribution"
            apply plugin: 'com.google.gms.google-services'
            ext.websiteUpdateUrl = "null"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "false"
            buildConfigField "org.session.libsession.utilities.Device", "DEVICE", "org.session.libsession.utilities.Device.ANDROID"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "$ext.websiteUpdateUrl"
            buildConfigField 'String', 'PUSH_KEY_SUFFIX', '\"\"'
        }

        huawei {
            dimension "distribution"
            ext.websiteUpdateUrl = "null"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "true"
            buildConfigField "org.session.libsession.utilities.Device", "DEVICE", "org.session.libsession.utilities.Device.HUAWEI"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "$ext.websiteUpdateUrl"
            buildConfigField 'String', 'PUSH_KEY_SUFFIX', '\"_HUAWEI\"'
        }

        website {
            dimension "distribution"
            ext.websiteUpdateUrl = "https://github.com/oxen-io/session-android/releases"
            buildConfigField "boolean", "PLAY_STORE_DISABLED", "true"
            buildConfigField "org.session.libsession.utilities.Device", "DEVICE", "org.session.libsession.utilities.Device.ANDROID"
            buildConfigField "String", "NOPLAY_UPDATE_URL", "\"$ext.websiteUpdateUrl\""
            buildConfigField 'String', 'PUSH_KEY_SUFFIX', '\"\"'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def abiName = output.getFilter("ABI") ?: 'universal'
            def postFix = abiPostFix.get(abiName, 0)

            if (postFix >= postFixSize) throw new AssertionError("postFix is too large")
            output.outputFileName = output.outputFileName = "session-${variant.versionName}-${abiName}.apk"
            output.versionCodeOverride = canonicalVersionCode * postFixSize + postFix
        }
    }

    lintOptions {
        abortOnError true
        baseline file("lint-baseline.xml")
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    buildFeatures {
        dataBinding true
        viewBinding true
        buildConfig true
    }

    def huaweiEnabled = project.properties['huawei'] != null

    applicationVariants.configureEach { variant ->
        if (variant.flavorName == 'huawei') {
            variant.getPreBuildProvider().configure { task ->
                task.doFirst {
                    if (!huaweiEnabled) {
                        def message = 'Huawei is not enabled. Please add -Phuawei command line arg. See BUILDING.md'
                        logger.error(message)
                        throw new GradleException(message)
                    }
                }
            }
        }
    }

    task testPlayDebugUnitTestCoverageReport(type: JacocoReport, dependsOn: "testPlayDebugUnitTest") {
        reports {
            xml.setRequired(true)
        }

        // Add files that should not be listed in the report (e.g. generated Files from dagger)
        def fileFilter = []
        def mainSrc = "$projectDir/src/main/java"
        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/playDebug", excludes: fileFilter)

        // Compiled Kotlin class files are written into build-variant-specific subdirectories of 'build/tmp/kotlin-classes'.
        classDirectories.from = files([kotlinDebugTree])

        // To produce an accurate report, the bytecode is mapped back to the original source code.
        sourceDirectories.from = files([mainSrc])

        // Execution data generated when running the tests against classes instrumented by the JaCoCo agent.
        // This is enabled with 'enableUnitTestCoverage' in the 'debug' build type.
        executionData.from = "${project.buildDir}/outputs/unit_test_code_coverage/playDebugUnitTest/testPlayDebugUnitTest.exec"
    }
    testNamespace 'network.loki.messenger.test'
}

dependencies {
    implementation project(":liblazysodium")
    implementation project(":libsession")
    implementation project(":libsession-util")
    implementation project(":libsignal")

    implementation libs.aesgcmProvider

    // Allow Compose' "Bill of Materials" (BoM) to choose the version numbers for Compose-related
    // components - which we then import without version numbers and let the BoM handle that.
    // See: https://developer.android.com/develop/ui/compose/bom
    // See: https://developer.android.com/develop/ui/compose/bom/bom-mapping
    implementation platform(libs.androidx.compose.bom)
    testImplementation platform(libs.androidx.compose.bom)

    // All versioning for the following Compose components is provided by the above Compose BoM..
    implementation libs.androidx.compose.foundation.layout
    implementation libs.androidx.compose.material
    implementation libs.androidx.compose.runtime.livedata
    implementation libs.androidx.compose.ui
    implementation libs.androidx.compose.ui.tooling

    // ..but we handle the versioning for the other androidx components ourselves.
    implementation libs.androidx.activity.ktx
    implementation libs.androidx.appcompat
    implementation libs.androidx.cardview
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.core.ktx
    implementation libs.androidx.exifinterface
    implementation libs.androidx.fragment.ktx
    implementation libs.androidx.gridlayout
    implementation libs.androidx.lifecycle.common.java8
    implementation libs.androidx.lifecycle.extensions
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.process
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.paging.runtime.ktx
    implementation libs.androidx.preference.ktx
    implementation libs.androidx.recyclerview
    implementation libs.androidx.work.runtime.ktx

    implementation libs.circular.progress.bar
    implementation libs.conscrpt.android

    implementation libs.dagger.hilt.android
    kapt libs.dagger.hilt.android.compiler

    implementation libs.flexbox
    implementation libs.material

    playImplementation dependencies.create(libs.firebase.messaging.get()) {
        exclude group: 'com.google.firebase', module: 'firebase-core'
        exclude group: 'com.google.firebase', module: 'firebase-analytics'
        exclude group: 'com.google.firebase', module: 'firebase-measurement-connector'
    }

    // Required for FirebaseTokenFetcher async await()
    playImplementation libs.kotlinx.coroutines.play.services

    if (project.hasProperty('huawei')) huaweiImplementation 'com.huawei.hms:push:6.7.0.300'

    // TODO: Cannot upgrade ExoPlayer atm - needs upgrade to modern `Media3` versions - see the exoPlayer vars for details.
    implementation libs.exoplayer.core
    implementation libs.exoplayer.ui

    implementation libs.webrtc.sdk

    // ACL TODO: Continue from here!!!
    implementation "me.leolin:ShortcutBadger:$shortcutBadgerVersion"
    implementation 'se.emilsjolander:stickylistheaders:2.7.0'
    implementation 'com.jpardogo.materialtabstrip:library:1.0.9'
    implementation 'org.apache.httpcomponents:httpclient-android:4.3.5'
    implementation 'commons-net:commons-net:3.7.2'
    implementation 'com.github.chrisbanes:PhotoView:2.1.3'
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"
    implementation 'com.makeramen:roundedimageview:2.1.0'
    implementation 'com.pnikosis:materialish-progress:1.5'
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'pl.tajchert:waitingdots:0.1.0'
    implementation 'com.theartofdev.edmodo:android-image-cropper:2.8.0'
    implementation 'com.melnykov:floatingactionbutton:1.3.0'
    implementation 'com.google.zxing:android-integration:3.1.0'
    implementation 'mobi.upod:time-duration-picker:1.1.3'
    implementation 'com.google.zxing:core:3.2.1'
    implementation ("com.davemorrissey.labs:subsampling-scale-image-view:$subsamplingScaleImageViewVersion") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation ('cn.carbswang.android:NumberPickerView:1.0.9') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    implementation ('com.tomergoldst.android:tooltips:1.0.6') {
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
    implementation ('com.klinkerapps:android-smsmms:4.0.1') {
        exclude group: 'com.squareup.okhttp', module: 'okhttp'
        exclude group: 'com.squareup.okhttp', module: 'okhttp-urlconnection'
    }
    implementation 'com.annimon:stream:1.1.8'
    implementation 'com.codewaves.stickyheadergrid:stickyheadergrid:0.9.4'


    implementation "androidx.sqlite:sqlite-ktx:$sqLiteVersion"
    implementation 'net.zetetic:sqlcipher-android:4.5.4@aar'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinxJsonVersion"
    implementation "com.github.oxen-io.session-android-curve-25519:curve25519-java:$curve25519Version"
    implementation "net.java.dev.jna:jna:5.12.1@aar"
    implementation "com.google.protobuf:protobuf-java:$protobufVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation 'app.cash.copper:copper-flow:1.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    implementation libs.kotlinx.coroutines.android

    implementation "nl.komponents.kovenant:kovenant:$kovenantVersion"
    implementation "nl.komponents.kovenant:kovenant-android:$kovenantVersion"
    implementation "com.jakewharton.rxbinding3:rxbinding:3.1.0"
    implementation "com.github.tbruyelle:rxpermissions:0.10.2"
    implementation "com.github.ybq:Android-SpinKit:1.4.0"
    implementation "com.opencsv:opencsv:4.6"
    testImplementation "junit:junit:$junitVersion"
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation "org.mockito:mockito-inline:4.11.0"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    androidTestImplementation "org.mockito:mockito-android:4.11.0"
    androidTestImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"

    testImplementation "androidx.arch.core:core-testing:2.2.0"

    testImplementation libs.kotlinx.coroutines.test
    androidTestImplementation libs.kotlinx.coroutines.test

    testImplementation libs.androidx.test.core
    androidTestImplementation libs.androidx.test.core

    androidTestImplementation dependencies.create(libs.barista.get()) {
        exclude group: 'org.jetbrains.kotlin'
    }

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation libs.androidx.test.rules
    androidTestImplementation libs.androidx.test.runner

    // Assertions
    androidTestImplementation libs.androidx.test.junit
    androidTestImplementation libs.androidx.test.truth
    testImplementation libs.google.truth
    androidTestImplementation libs.google.truth

    // Espresso dependencies
    androidTestImplementation libs.espresso.core
    androidTestImplementation libs.espresso.contrib
    androidTestImplementation libs.espresso.intents
    androidTestImplementation libs.espresso.accessibility
    androidTestImplementation libs.espresso.web
    androidTestImplementation libs.espresso.idling.concurrent
    androidTestImplementation libs.espresso.idling.resource

    androidTestUtil libs.androidx.test.orchestrator

    testImplementation libs.roboelectric
    testImplementation libs.shadows.multidex

    implementation libs.glide.compose

    implementation libs.accompantist.themeadapter.appcompat
    implementation libs.accompanist.pager.indicators
}

// Grab the last git commit timestamp which we append to the version number in the Settings activity
static def getLastCommitTimestamp() {
    new ByteArrayOutputStream().withStream { os ->
        return os.toString() + "000"
    }
}

// Discovers supported languages listed as under the res/values- directory
def autoResConfig() {
    def files = new ArrayList<String>()
    def root = file("src/main/res")
    root.eachFile { f -> files.add(f.name) }
    ['en'] + files.collect { f -> f =~ /^values-([a-z]{2}(-r[A-Z]{2})?)$/ }
         .findAll { matcher -> matcher.find() }
         .collect { matcher -> matcher.group(1) }
         .sort()
}

// Allow references to generated code
kapt {
    correctErrorTypes = true
}